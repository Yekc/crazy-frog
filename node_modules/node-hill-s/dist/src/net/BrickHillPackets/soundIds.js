var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const PacketBuilder = require("../../net/PacketBuilder").default;
function createSoundIdBuffer(sound, modification, socket) {
    return __awaiter(this, void 0, void 0, function* () {
        const soundPacket = new PacketBuilder("SoundEmitter")
            .write("uint32", sound.netId)
            .write("string", modification);
        switch (modification) {
            case "position": {
                soundPacket.write("vector3", sound.position);
                break;
            }
            case "volume": {
                soundPacket.write("float", sound.volume);
                break;
            }
            case "pitch": {
                soundPacket.write("float", sound.pitch);
                break;
            }
            case "loop": {
                soundPacket.write("bool", sound.loop);
                break;
            }
            case "range": {
                soundPacket.write("float", sound.range);
                break;
            }
            case "global": {
                soundPacket.write("bool", sound.global);
                break;
            }
            case "sound": {
                yield soundPacket.writeAsset(sound.sound);
                break;
            }
            case "soundPos": {
                soundPacket.write("float", 0); // TODO change this when you get sound pos setting to work
                break;
            }
            case "destroy":
            case "stop":
            case "play": {
                break;
            }
        }
        if (socket) {
            return soundPacket.send(socket);
        }
        return soundPacket.broadcast();
    });
}
module.exports = createSoundIdBuffer;
