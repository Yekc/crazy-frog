"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const Game_1 = __importDefault(require("./Game"));
const Vector3_1 = __importDefault(require("./Vector3"));
const soundIds_1 = __importDefault(require("../net/BrickHillPackets/soundIds"));
class SoundEmitter extends events_1.EventEmitter {
    constructor(sound, position = new Vector3_1.default(0, 0, 0), range = 30) {
        super();
        /** Volume of the sound emitted */
        this.volume = 1;
        /** Pitch of the sound emitted */
        this.pitch = 1;
        /** Range of the sound emitted */
        this.range = 30;
        /** Whether or not to loop the sound */
        this.loop = false;
        /** Whether or not to play the sound globally */
        this.global = false;
        this.position = new Vector3_1.default(0, 0, 0);
        /** If .destroy() has been called on the sound emitter. */
        this.destroyed = false;
        this.playing = false;
        SoundEmitter.soundEmitterId += 1;
        this.netId = SoundEmitter.soundEmitterId;
        this._steps = [];
        this.sound = sound;
        this.volume = 1;
        this.pitch = 1;
        this.range = range;
        this.loop = false;
        // Positioning
        this.position = position;
        this.destroyed = false;
        this.playing = false;
    }
    /** Remove the sound emitter from Game.world, \
     * clear all event listeners, \
     * and tell clients to delete the sound emitter. */
    destroy() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.destroyed)
                return Promise.reject("Sound emitter has already been destroyed.");
            const sounds = Game_1.default.world.sounds;
            this._steps.forEach((loop) => {
                clearInterval(loop);
            });
            this.removeAllListeners();
            const index = sounds.indexOf(this);
            if (index !== -1)
                sounds.splice(index, 1);
            yield (0, soundIds_1.default)(this, "destroy");
            this.netId = undefined;
            this.destroyed = true;
        });
    }
    /**
 * Identical to setInterval, but will be cleared after the sound emitter is destroyed.
 * Use this if you want to attach loops to sound emitters, but don't want to worry about clearing them after they're destroyed.
 * @param callback The callback function.
 * @param delay The delay in milliseconds.
 */
    setInterval(callback, delay) {
        const loop = setInterval(callback, delay);
        this._steps.push(loop);
        return loop;
    }
    /** Set the position of the sound emitter. */
    setPosition(position) {
        return __awaiter(this, void 0, void 0, function* () {
            this.position = new Vector3_1.default().fromVector(position);
            return yield (0, soundIds_1.default)(this, "position");
        });
    }
    /** Set the volume of the sound emitter. */
    setVolume(volume) {
        return __awaiter(this, void 0, void 0, function* () {
            this.volume = volume;
            return yield (0, soundIds_1.default)(this, "volume");
        });
    }
    /** Set the pitch of the sound emitter. */
    setPitch(pitch) {
        return __awaiter(this, void 0, void 0, function* () {
            this.pitch = pitch;
            return yield (0, soundIds_1.default)(this, "pitch");
        });
    }
    /** Set the looping of the sound emitter. */
    setLoop(loop) {
        return __awaiter(this, void 0, void 0, function* () {
            this.loop = loop;
            return yield (0, soundIds_1.default)(this, "loop");
        });
    }
    /** Set the range of the sound emitter. */
    setRange(range) {
        return __awaiter(this, void 0, void 0, function* () {
            this.range = range;
            return yield (0, soundIds_1.default)(this, "range");
        });
    }
    setGlobal(global) {
        return __awaiter(this, void 0, void 0, function* () {
            this.global = global;
            return yield (0, soundIds_1.default)(this, "global");
        });
    }
    /** Set the sound to emit. */
    setSound(sound) {
        return __awaiter(this, void 0, void 0, function* () {
            this.sound = sound;
            return yield (0, soundIds_1.default)(this, "sound");
        });
    }
    /** Play the sound */
    play() {
        return __awaiter(this, void 0, void 0, function* () {
            this.playing = true;
            return yield (0, soundIds_1.default)(this, "play");
        });
    }
    /** Stop the sound */
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            this.playing = false;
            return yield (0, soundIds_1.default)(this, "stop");
        });
    }
}
exports.default = SoundEmitter;
SoundEmitter.soundEmitterId = 0;
