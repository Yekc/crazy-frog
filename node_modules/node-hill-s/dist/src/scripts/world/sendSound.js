var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function addSoundProperties(packet, sound) {
    return __awaiter(this, void 0, void 0, function* () {
        packet.write("uint32", sound.netId);
        yield packet.writeAsset(sound.sound);
        packet.write("vector3", sound.position);
        // Additional attributes
        let attributes = "";
        if (sound.volume != 1)
            attributes += "A";
        if (sound.pitch != 1)
            attributes += "B";
        if (sound.loop)
            attributes += "C";
        if (sound.range != 30)
            attributes += "D";
        if (sound.global)
            attributes += "F";
        if (sound.playing)
            attributes += "G";
        packet.write("string", attributes);
        for (let i = 0; i < attributes.length; i++) {
            const ID = attributes.charAt(i);
            switch (ID) {
                case "A":
                    packet.write("float", sound.volume);
                    break;
                case "B":
                    packet.write("float", sound.pitch);
                    break;
                case "C":
                    packet.write("bool", sound.loop);
                    break;
                case "D":
                    packet.write("float", sound.range);
                    break;
                case "F":
                    packet.write("bool", sound.global);
                    break;
                case "G":
                    packet.write("float", 0);
                    break;
            }
        }
        return packet;
    });
}
module.exports = addSoundProperties;
