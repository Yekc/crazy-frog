var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const addSoundProperties = require("./sendSound");
const AssetDownloader = require("../../class/AssetDownloader").default;
const PacketBuilder = require("../../net/PacketBuilder").default;
function loadSounds(sounds = []) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!sounds.length)
            return;
        const packet = new PacketBuilder("SendSoundEmitters", { compression: true })
            .write("uint32", sounds.length);
        const assetRequests = [];
        for (const sound of sounds)
            assetRequests.push(AssetDownloader.getAssetData(sound.sound).catch(() => { }));
        yield Promise.all(assetRequests);
        for (const sound of sounds)
            yield addSoundProperties(packet, sound);
        return packet;
    });
}
module.exports = loadSounds;
